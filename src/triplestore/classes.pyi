from __future__ import annotations

from dataclasses import dataclass
from typing import Any, Generator

class StoreException(UserWarning): ...
class FailedToComply(StoreException): ...
class NotFound(StoreException): ...

class E(int):
    def __new__(cls, id_: int | None = None) -> E: ...
    @classmethod
    def from_str(cls, value: str) -> E: ...
    @property
    def value(self) -> Any: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Triple:
    def __init__(self, s: int, p: int, o: int) -> None: ...
    @property
    def s(self) -> E: ...
    @property
    def p(self) -> E: ...
    @property
    def o(self) -> E: ...
    def __iter__(self) -> Generator[E, None, None]: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...

class Value:
    def __init__(self, value: Any, type_: type) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def validate(self) -> bool: ...

class TripleStore:
    def __init__(
        self, /, *, kv_store: dict[int, Any], relations: dict[int, set[int]]
    ) -> None: ...
    def __getitem__(self, key: slice | Triple | int) -> set[Triple]: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Generator[Triple, None, None]: ...
    def __contains__(self, triple: Triple) -> bool: ...
    def add_triple(self, triple: Triple) -> Triple: ...
    def add(self, s: int, p: int, o: int) -> Triple: ...
    def _add_triple_to_indexes(self, s: int, p: int, o: int) -> Triple: ...
    def __setitem__(self, key: slice, value: int) -> Triple | list[Triple]: ...
    def create_subjects_with(
        self, predobjects: dict[int, list[int]]
    ) -> Generator[Triple, None, None]: ...
    def set_all(
        self, *, subjects: list[int], predobjects: dict[int, list[int]]
    ) -> None: ...
    def get(
        self, clause_dict: dict[int, int], default: Any = None
    ) -> Triple | None: ...
    def get_all(self, clause_dict: dict[int, int]) -> set[Triple]: ...
    def get_last_added(self) -> int: ...
    def __delitem__(self, item: Triple) -> None: ...
    def __str__(self) -> str: ...

@dataclass
class Query:
    store: TripleStore
    triple: Triple
    def __call__(self) -> set[Triple]: ...

class QuerySet:
    def __init__(self, values: int) -> None: ...
    def __getattr__(self, name: str) -> Any: ...

def _add2index(
    index: dict[int, dict[int, set[int]]], a: int, b: int, c: int
) -> None: ...
