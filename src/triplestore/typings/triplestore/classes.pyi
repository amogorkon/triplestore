"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any, Generator

_sp: dict[int, set[int]] = ...
_po: dict[int, set[int]] = ...
_os: dict[int, set[int]] = ...
_kv_store: dict[int, Any] = ...

class StoreException(UserWarning):
    """All Exceptions specific to this package for easy filtering."""

    ...

class FailedToComply(StoreException): ...
class NotFound(StoreException): ...

class E(int):
    @classmethod
    def from_str(cls, value: str) -> E: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

@dataclass(frozen=True)
class Triple:
    """A triple of (subject, predicate, object)."""

    s: int
    p: int
    o: int
    ...

class Value:
    """Some content to be put in the kv_store as a typed value."""
    def __init__(self, value: Any, type_: type) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def validate(self) -> bool: ...

class TripleStore:
    """A set of three dicts that work together as one."""
    def __init__(
        self, /, *, kv_store: dict[int, Any], relations: dict[int, set[int]]
    ) -> None: ...
    def __getitem__(self, key: slice | Triple) -> set[E]: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Generator[tuple[int, int, int], None, None]: ...
    def __contains__(self, value: Triple) -> bool: ...
    def add_triple(self, triple: Triple) -> Triple: ...
    def add(self, s: int, p: int, o: int) -> Triple: ...
    def __setitem__(self, key: slice, value: int) -> Triple: ...
    def create_subjects_with(self, predobjects: dict[int, list[int]]) -> list[int]: ...
    def set_all(
        self, *, subjects: list[int], predobjects: dict[int, list[int]]
    ) -> list[Triple]: ...
    def get(self, clause_dict: dict[int, int]) -> Triple | None: ...
    def get_all(self, clause_dict: dict[int, int]) -> set[Triple]: ...
    def get_last_added(self) -> int: ...
    def __delitem__(self, item: Triple) -> None: ...
    def __str__(self) -> str: ...

@dataclass
class Query:
    """Class representing a query to the store."""

    store: TripleStore
    spo: Triple
    def __call__(self) -> set[Triple]: ...

class QuerySet:
    def __init__(self, values: Triple) -> None: ...
    def __getattr__(self, name: str) -> Any:
        """Get the value of an attribute."""
        ...
